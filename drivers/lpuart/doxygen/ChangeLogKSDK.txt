/*!
@page driver_log Driver Change Log

@section lpuart LPUART
  The current LPUART driver version is 2.7.0.

  - 2.7.0
    - Improvements
      - Split some functions, fixed CCM problem in file fsl_lpuart.c.

  - 2.6.0
    - Bug Fixes
      - Fixed bug that when there are multiple lpuart instance, unable to support different ISR.

  - 2.5.3
    - Bug Fixes
      - Fixed comments by replacing unused status flags kLPUART_NoiseErrorInRxDataRegFlag and kLPUART_ParityErrorInRxDataRegFlag
        with kLPUART_NoiseErrorFlag and kLPUART_ParityErrorFlag.

  - 2.5.2
    - Bug Fixes
      - Fixed bug that when setting watermark for TX or RX FIFO, the value may exceed the maximum limit.
    - Improvements
      - Added check in LPUART_TransferDMAHandleIRQ and LPUART_TransferEdmaHandleIRQ to ensure if user enables
        any interrupts other than transfer complete interrupt, the dma transfer is not terminated by mistake.

  - 2.5.1
    - Improvements
      - Use separate data for TX and RX in lpuart_transfer_t.
    - Bug Fixes
      - Fixed bug that when ring buffer is used, if some data is received in ring buffer first before calling
        LPUART_TransferReceiveNonBlocking, the received data count returned by LPUART_TransferGetReceiveCount is wrong.

  - 2.5.0
    - Bug Fixes
      - Added missing interrupt enable masks kLPUART_Match1InterruptEnable and kLPUART_Match2InterruptEnable.
      - Fixed bug in LPUART_EnableInterrupts, LPUART_DisableInterrupts and LPUART_GetEnabledInterrupts that the
        BAUD[LBKDIE] bit field should be soc specific.
      - Fixed bug in LPUART_TransferHandleIRQ that idle line interrupt should be disabled when rx data size is zero.
      - Deleted unused status flags kLPUART_NoiseErrorInRxDataRegFlag and kLPUART_ParityErrorInRxDataRegFlag, since
        firstly their function are the same as kLPUART_NoiseErrorFlag and kLPUART_ParityErrorFlag, secondly to obtain
        them one data word must be read out thus interfering with the receiving process.
      - Fixed bug in LPUART_GetStatusFlags that the STAT[LBKDIF], STAT[MA1F] and STAT[MA2F] should be soc specific.
      - Fixed bug in LPUART_ClearStatusFlags that tx/rx FIFO is reset by mistake when clearing flags.
      - Fixed bug in LPUART_TransferHandleIRQ that while clearing idle line flag the other bits should be masked in case
        other status bits be cleared by accident.
      - Fixed bug of race condition during LPUART transfer using transactional APIs, by disabling and re-enabling the
        global interrupt before and after critical operations on interrupt enable register.
      - Fixed DMA/eDMA transfer blocking issue by enabling tx idle interrupt after DMA/eDMA transmission finishes.
    - New Features
      - Added APIs LPUART_GetRxFifoCount/LPUART_GetTxFifoCount to get rx/tx FIFO data count.
      - Added APIs LPUART_SetRxFifoWatermark/LPUART_SetTxFifoWatermark to set rx/tx FIFO water mark.

  - 2.4.1
    - Bug Fixes
      - Fixed MISRA advisory 17.7 issues.

  - 2.4.0
    - New Features
      - Added APIs to configure 9-bit data mode, set slave address and send address.

  - 2.3.1
    - Bug Fixes
      - Fixed MISRA advisory 15.5 issues.

  - 2.3.0
    - Improvements
      - Modified LPUART_TransferHandleIRQ so that txState will be set to idle only when all data has been sent out to bus.
      - Modified LPUART_TransferGetSendCount so that this API returns the real byte count that LPUART has sent out rather
        than the software buffer status.
      - Added timeout mechanism when waiting for certain states in transfer driver.

  - 2.2.8
    - Bug Fixes
      - Fixed issue for MISRA-2012 check.
        - Fixed rule-10.3, rule-14.4, rule-15.5.
      - Eliminated Pa082 warnings by assigning volatile variables to local variables and using local variables instead.
      - Fixed MISRA issues.
        - Fixed rules 10.1, 10.3, 10.4, 10.8, 14.4, 11.6, 17.7.
    - Improvements
      - Added check for kLPUART_TransmissionCompleteFlag in LPUART_WriteBlocking, LPUART_TransferHandleIRQ,
        LPUART_TransferSendDMACallback and LPUART_SendEDMACallback to ensure all the data would be sent out to bus.
      - Rounded up the calculated sbr value in LPUART_SetBaudRate and LPUART_Init to achieve more accurate baudrate
        setting. Changed osr from uint32_t to uint8_t since osr's bigest value is 31.
      - Modified LPUART_ReadBlocking so that if more than one receiver errors occur, all status flags will be cleared
        and the most severe error status will be returned.

  - 2.2.7
    - Bug Fixes
      - Fixed issue for MISRA-2012 check.
        - Fixed rule-12.1, rule-17.7, rule-14.4, rule-13.3, rule-14.4, rule-10.4, rule-10.8, rule-10.3, rule-10.7,
          rule-10.1, rule-11.6, rule-13.5, rule-11.3, rule-13.2, rule-8.3.

  - 2.2.6
    - Bug Fixes
      - Fixed the issue of register's being in repeated reading status while dealing with the IRQ routine.

  - 2.2.5
    - Bug Fixes
      - Do not set or clear the TIE/RIE bits when using LPUART_EnableTxDMA and LPUART_EnableRxDMA.

  - 2.2.4
    - Improvements
      - Added hardware flow control function support.
      - Added idle-line-detecting feature in LPUART_TransferNonBlocking function. If an idle line is detected, a
        callback is triggered with status kStatus_LPUART_IdleLineDetected returned. This feature may be useful when the
        received Bytes is less than the expected received data size. Before triggering the callback, data in the FIFO
        (if has FIFO) is read out, and no interrupt will be disabled, except for that the receive data size reaches 0.
      - Enabled the RX FIFO watermark function. With the idle-line-detecting feature enabled, users can set the watermark
        value to whatever you want (should be less than the RX FIFO size). Data is received and a callback will be
        triggered when data receive ends.

  - 2.2.3
    - Improvements
      - Changed parameter type in LPUART_RTOS_Init struct from rtos_lpuart_config to lpuart_rtos_config_t.
    - Bug Fixes
      - Disabled LPUART receive interrupt instead of all NVICs when reading data from ring buffer.
        Otherwise when the ring buffer is used, receive nonblocking method will disable all NVICs to protect
        the ring buffer. This may has a negative effect on other IPs that are using the interrupt.

  - 2.2.2
    - Improvements
      - Added software reset feature support.
      - Added software reset API in LPUART_Init.

  - 2.2.1
    - Improvements
      - Added separate RX/TX IRQ number support.

  - 2.2.0
    - Improvements
      - Added support of 7 data bits and MSB.

  - 2.1.1
    - Improvements
      - Removed unnecessary check of event flags and assert in LPUART_RTOS_Receive.
      - Added code to always wait for RX event flag in LPUART_RTOS_Receive.

  - 2.1.0
    - Improvements
      - Update transactional APIs.

@if dox_section_lpuart_dma_driver

@section lpuart_dma LPUART_DMA
  The current LPUART_DMA driver version is 2.4.0.

  - 2.4.0
    - Refer LPUART driver change log 2.1.0 to 2.4.0

@endif

@if dox_section_lpuart_edma_driver

@section lpuart_edma LPUART_EDMA
  The current LPUART_EDMA driver version is 2.4.0.

  - 2.4.0
    - Refer LPUART driver change log 2.1.0 to 2.4.0

@endif

@if dox_section_lpuart_freertos_driver

@section lpuart_freertos LPUART_FREERTOS
  The current LPUART_FREERTOS driver version is 2.4.0.

  - 2.4.0
    - Refer LPUART driver change log 2.1.0 to 2.4.0

@endif

*/
